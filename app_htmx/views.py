from django.shortcuts import render
from django.http import HttpResponse
import random
from django.views.decorators.csrf import csrf_exempt
from datetime import datetime


def load_products_html(request):  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ html
    products = ["–¢–µ–ª–µ—Ñ–æ–Ω", "–ù–æ—É—Ç–±—É–∫", "–ù–∞—É—à–Ω–∏–∫–∏", "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–ú—ã—à—å", "–ú–æ–Ω–∏—Ç–æ—Ä"]
    html = "".join(f"<li>{product}</li>" for product in
                   random.sample(products, 4))  # –ü–æ–ª—É—á–∞–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º html
    return HttpResponse(html)


def load_products_with_render(request):  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ render —à–∞–±–ª–æ–Ω–∞ list_products.html
    products = ["–¢–µ–ª–µ—Ñ–æ–Ω", "–ù–æ—É—Ç–±—É–∫", "–ù–∞—É—à–Ω–∏–∫–∏", "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–ú—ã—à—å", "–ú–æ–Ω–∏—Ç–æ—Ä"]
    return render(request, 'app_htmx/list_products.html', {'products': random.sample(products, 4)})


def product_list_view(request):  # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    return render(request, 'app_htmx/products.html')


# ____________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_target
def hx_target_view(request):
    return render(request, 'app_htmx/demo_hx_target.html')


def load_status(request):
    return HttpResponse('<button disabled>–°—Ç–∞—Ç—É—Å: OK</button>')


def row_details(request):
    return HttpResponse("""
    <tr>
        <td colspan="3">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: –¢–æ–≤–∞—Ä A, –¶–µ–Ω–∞: 100‚ÇΩ</td>
    </tr>
    """)


def product_details(request):
    return HttpResponse("–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ –∫–ª–∞—Å—Å–Ω—ã–π —Ç–æ–≤–∞—Ä!")


def more_info(request):
    return HttpResponse("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


@csrf_exempt
def validate_email(request):
    email = request.POST.get("email", "")
    if "@" not in email:
        return HttpResponse("<span style='color: red'>–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email</span>")
    return HttpResponse("<span style='color: green'>Email –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!</span>")


def get_result(request):
    return HttpResponse("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")


def show_note(request):
    return HttpResponse("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")


# __________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_swap

def hx_swap_view(request):
    return render(request, 'app_htmx/demo_hx_swap.html')


def swap_inner(request):
    return HttpResponse("<b>–ó–∞–º–µ–Ω—ë–Ω–Ω—ã–π innerHTML</b>")


def swap_outer(request):
    return HttpResponse(
        "<div class='response' id='outer' style='color: red; background: #7abaff;'>–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—ë–Ω outerHTML</div>")


def swap_text(request):
    return HttpResponse("<b>–≠—Ç–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ HTML</b>")


def swap_before(request):
    return HttpResponse("<div style='color: green;'>‚Üí –î–û —ç–ª–µ–º–µ–Ω—Ç–∞</div>")


def swap_after_begin(request):
    return HttpResponse("<div style='color: blue;'>‚á® –í–°–¢–ê–í–ö–ê –í –ù–ê–ß–ê–õ–û</div>")


def swap_before_end(request):
    return HttpResponse("<div style='color: purple;'>‚á¶ –í–°–¢–ê–í–ö–ê –í –ö–û–ù–ï–¶</div>")


def swap_after(request):
    return HttpResponse("<div style='color: orange;'>‚Üí –ü–û–°–õ–ï —ç–ª–µ–º–µ–Ω—Ç–∞</div>")


def swap_delete(request):
    return HttpResponse("")  # HTMX –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç —ç–ª–µ–º–µ–Ω—Ç


def swap_none(request):
    # –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
    return HttpResponse("<div style='color: gray;'>–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω</div>")


# __________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_trigger_mouse


def hx_trigger_mouse_view(request):
    return render(request, 'app_htmx/demo_hx_trigger_mouse.html')


def mouse_event(request, event_name):
    messages = {
        "click": "‚úî –ö–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!",
        "dblclick": "‚úî –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!",
        "mousedown": "‚úî –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ (mousedown)",
        "mouseup": "‚úî –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ (mouseup)",
        "mouseover": "‚úî –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ (mouseover)",
        "mouseout": "‚úî –£—Ö–æ–¥ –º—ã—à–∏ (mouseout)",
        "mousemove": "‚úî –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ (mousemove)",
        "contextmenu": "‚úî –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ (contextmenu)",
    }

    message = messages.get(event_name, f"–°–æ–±—ã—Ç–∏–µ: {event_name}")
    return HttpResponse(message)


# __________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_trigger_input

def hx_trigger_input_view(request):
    return render(request, 'app_htmx/demo_hx_trigger_input.html')


def search(request):
    query = request.GET.get("query", "")
    return HttpResponse(f"üîé –ü–æ–∏—Å–∫ –ø–æ: {query}")


def filter_category(request):
    category = request.GET.get("category", "")
    return HttpResponse(f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}")


def keydown_event(request):
    return HttpResponse("‚èé –ù–∞–∂–∞—Ç Enter")


def live_search(request):
    term = request.GET.get("search", "")
    return HttpResponse(f"üîç –ñ–∏–≤–æ–π –ø–æ–∏—Å–∫: {term}")


@csrf_exempt
def submit_form(request):
    name = request.POST.get("name", "")
    return HttpResponse(f"‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {name}")


@csrf_exempt
def form_reset(request):
    return HttpResponse("üîÑ –§–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞")


def username_help(request):
    return HttpResponse("üë§ –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.")


@csrf_exempt
def focus_event(request):
    return HttpResponse("üîç –ö—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞.")


@csrf_exempt
def blur_event(request):
    return HttpResponse("üí® –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞ –≤ –±–ª–æ–∫–µ.")


@csrf_exempt
def validate_email(request):
    email = request.POST.get("email", "")
    return HttpResponse(f"üìß Email –ø—Ä–æ–≤–µ—Ä–µ–Ω: {email}")


def clipboard_event(request):
    action = request.GET.get("action", "")
    match action:
        case "copy":
            return HttpResponse("üìÑ –í—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç!")
        case "cut":
            return HttpResponse("‚úÇÔ∏è –í—ã –≤—ã—Ä–µ–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç!")
        case "paste":
            return HttpResponse("üì• –í—ã –≤—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç!")
        case _:
            return HttpResponse("ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


# __________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_trigger_drag

def hx_trigger_drag_view(request):
    return render(request, 'app_htmx/demo_hx_trigger_drag.html')


def drag_start(request):
    return HttpResponse("üöö –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å (dragstart)")


def drag_enter(request):
    return HttpResponse("üì• –ù–∞–≤–µ–ª–∏ –Ω–∞ –∑–æ–Ω—É —Å–±—Ä–æ—Å–∞ (dragenter)")


def drag_over(request):
    return HttpResponse("üåÄ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞–¥ –∑–æ–Ω–æ–π (dragover)")


def drag_leave(request):
    return HttpResponse("üèÉ –ü–æ–∫–∏–Ω—É–ª–∏ –∑–æ–Ω—É —Å–±—Ä–æ—Å–∞ (dragleave)")


@csrf_exempt
def drop(request):
    name_file = request.POST.get('name', '')
    return HttpResponse(f"‚úÖ –û–±—ä–µ–∫—Ç {name_file!r} —Å–±—Ä–æ—à–µ–Ω! (drop)")


# __________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_trigger_load

def hx_trigger_load_view(request):
    return render(request, 'app_htmx/demo_hx_trigger_load.html')


def load_auto(request):
    return HttpResponse("<b>‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>")


def load_revealed(request):
    return HttpResponse("<b>üëÅÔ∏è –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º –≤ viewport!</b>")


def load_intersect(request):
    return HttpResponse("<b>üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏</b>")


# __________ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è demo_hx_trigger_adaptive

def hx_trigger_adaptive_view(request):
    return render(request, 'app_htmx/demo_hx_trigger_adaptive.html')


def adaptive_every(request):
    now = datetime.now().strftime("%H:%M:%S")
    return HttpResponse(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {now}")


def adaptive_delayed(request):
    return HttpResponse("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏")


def adaptive_resize(request):
    return HttpResponse("üìê –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω!")


def adaptive_input(request):
    value = request.GET.get("search", "")
    return HttpResponse(f"üîé –í–≤–µ–¥–µ–Ω–æ: {value}")


def adaptive_revealed(request):
    return HttpResponse("üì¶ –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º (lazy loaded)")


def adaptive_scroll(request):
    now = datetime.now().strftime("%H:%M:%S")
    return HttpResponse(f"üß≠ Scroll —Å—Ä–∞–±–æ—Ç–∞–ª –≤ {now}")


from time import sleep
import random

# –°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤
COLORS = ["#FF6B6B", "#FFD93D", "#6BCB77", "#4D96FF", "#9D4EDD"]

counter = 0  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å


def next_box(request):
    global counter
    if counter >= 10:
        return HttpResponse('<div class="box">‚úÖ –í—Å—ë –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>')

    sleep(0.7)  # –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    color = random.choice(COLORS)
    counter += 1

    html = f'''
    <div class="box" style="background-color: {color};">–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ #{counter}</div>

    <div id="lazy-scroll-trigger"
         hx-get="/htmx/hx-trigger/adaptive/next/"
         hx-trigger="revealed"
         hx-target="#lazy-scroll-trigger"
         hx-swap="outerHTML"
         class="loading-trigger">
      üëÄ –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏...
    </div>'''
    return HttpResponse(html)